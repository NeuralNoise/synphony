// Generated by CoffeeScript 1.3.3
(function() {

  define(['interactor/tangerine_exporter', 'interactor/project_manager'], function(TangerineExporter, ProjectManager) {
    return describe("TangerineExporter", function() {
      var expectArrayOfArraysOfLength, expectFirstFirstNameToBe, exporter, projectManager;
      projectManager = new ProjectManager(DB);
      exporter = null;
      beforeEach(function() {
        return exporter = new TangerineExporter({
          graphemesPerLesson: 3,
          wordsPerLesson: 20,
          curriculumId: "test_curriculum_id",
          sequence: projectManager.getSequences().first(),
          projectManager: projectManager
        });
      });
      xit("should export data tangerine expects", function() {
        var finished, handler;
        finished = false;
        handler = function(err, data) {
          (expect(err)).toBeFalsy();
          (expect(data)).toEqual(TANGERINE_SUBTESTS);
          return finished = true;
        };
        runs((function() {
          return exporter.run(handler);
        }), "the export process");
        return waitsFor((function() {
          return finished;
        }), "the export to finish");
      });
      expectArrayOfArraysOfLength = function(arrayOfArrays, outerLength, innerLength) {
        (expect(arrayOfArrays.length)).toEqual(outerLength);
        return (expect(arrayOfArrays[0].length)).toEqual(innerLength);
      };
      expectFirstFirstNameToBe = function(arrayOfArrays, firstName) {
        return (expect(arrayOfArrays[0][0].get('name'))).toEqual(firstName);
      };
      it("should have a method to split the gpcs into groups of 3", function() {
        var lessonGpcs;
        lessonGpcs = exporter.lessonGpcs();
        expectArrayOfArraysOfLength(lessonGpcs, 9, 3);
        return expectFirstFirstNameToBe(lessonGpcs, 'e_e');
      });
      it("should find words for each lesson", function() {
        var lessonWords;
        lessonWords = exporter.allLessonWords(exporter.lessonGpcs());
        expectArrayOfArraysOfLength(lessonWords, 9, 6);
        return expectFirstFirstNameToBe(lessonWords, 'e');
      });
      it("should sort the words properly", function() {
        var firstLessonWordNames, lessonWords;
        lessonWords = exporter.allLessonWords(exporter.lessonGpcs());
        lessonWords = exporter.sortWords(lessonWords);
        firstLessonWordNames = _.map(lessonWords[0], function(word) {
          return word.get('name');
        });
        return (expect(firstLessonWordNames)).toEqual(["em", "e", "me", "es", "sem", "meme"]);
      });
      it("should trim the word list to the specified number of words", function() {
        var lessonWords, result;
        lessonWords = [['a', 'b', 'c'], ['e', 'f', 'g', 'h']];
        result = exporter.trimLessonWords(lessonWords, 2);
        return expectArrayOfArraysOfLength(result, 2, 2);
      });
      return it("should generate the proper json for tangerine", function() {
        var lessonGpcs, lessonWords, subtests;
        lessonGpcs = exporter.lessonGpcs();
        lessonWords = exporter.lessonWords(lessonGpcs);
        subtests = exporter.generateSubtests(1, lessonGpcs[0], lessonWords[0]);
        return (expect(subtests)).toEqual(_.first(TANGERINE_SUBTESTS, 2));
      });
    });
  });

}).call(this);
