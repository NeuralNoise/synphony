// Generated by CoffeeScript 1.3.1
(function() {
  var CATEGORY_CODES, CODE_CATEGORIES, UNICODE_DATA_COLUMNS, UNICODE_DATA_FILE, UNICODE_DATA_URL, code, fs, http, parse, path, subcategory, supercategory, url, _ref,
    __hasProp = {}.hasOwnProperty;

  path = require('path');

  http = require('http');

  url = require('url');

  fs = require('fs');

  CODE_CATEGORIES = {
    "Cc": ["Other", "Control"],
    "Cf": ["Other", "Format"],
    "Cn": ["Other", "Not Assigned"],
    "Co": ["Other", "Private Use"],
    "Cs": ["Other", "Surrogate"],
    "LC": ["Letter", "Cased"],
    "Ll": ["Letter", "Lowercase"],
    "Lm": ["Letter", "Modifier"],
    "Lo": ["Letter", "Other"],
    "Lt": ["Letter", "Titlecase"],
    "Lu": ["Letter", "Uppercase"],
    "Mc": ["Mark", "Spacing Combining"],
    "Me": ["Mark", "Enclosing"],
    "Mn": ["Mark", "Nonspacing"],
    "Nd": ["Number", "Decimal Digit"],
    "Nl": ["Number", "Letter"],
    "No": ["Number", "Other"],
    "Pc": ["Punctuation", "Connector"],
    "Pd": ["Punctuation", "Dash"],
    "Pe": ["Punctuation", "Close"],
    "Pf": ["Punctuation", "Final quote"],
    "Pi": ["Punctuation", "Initial quote"],
    "Po": ["Punctuation", "Other"],
    "Ps": ["Punctuation", "Open"],
    "Sc": ["Symbol", "Currency"],
    "Sk": ["Symbol", "Modifier"],
    "Sm": ["Symbol", "Math"],
    "So": ["Symbol", "Other"],
    "Zl": ["Separator", "Line"],
    "Zp": ["Separator", "Paragraph"],
    "Zs": ["Separator", "Space"]
  };

  CATEGORY_CODES = {};

  for (code in CATEGORY_CODES) {
    if (!__hasProp.call(CATEGORY_CODES, code)) continue;
    _ref = CATEGORY_CODES[code], supercategory = _ref[0], subcategory = _ref[1];
    CATEGORY_CODES[supercategory] || (CATEGORY_CODES[supercategory] = {});
    CATEGORY_CODES[supercategory][subcategory] = code;
  }

  UNICODE_DATA_URL = "http://www.unicode.org/Public/UNIDATA/UCD.zip";

  UNICODE_DATA_FILE = path.normalize("" + __dirname + "/../../data/UnicodeData.txt");

  UNICODE_DATA_COLUMNS = ['value', 'name', 'category', 'class', 'bidirectionalCategory', 'mapping', 'decimalDigitValue', 'digitValue', 'numericValue', 'mirrored', 'unicodeName', 'comment', 'uppercaseMapping', 'lowercaseMapping', 'titlecaseMapping'];

  parse = function(text, callback) {
    var columns, data, key, line, value, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _results;
    _ref1 = text.split("\n");
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      line = _ref1[_i];
      columns = line.split(";");
      data = {};
      _ref2 = _.zip(UNICODE_DATA_COLUMNS, columns);
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        _ref3 = _ref2[_j], key = _ref3[0], value = _ref3[1];
        data[key] = value;
      }
      data.category_code = data.category;
      _results.push(data.category = CODE_CATEGORIES[data.category]);
    }
    return _results;
  };

  module.exports.run = function(callback) {
    var req;
    if (path.existsSync(UNICODE_DATA_FILE)) {
      return fs.readFile(UNICODE_DATA_FILE, 'utf8', function(err, text) {
        if (err != null) {
          return callback(new Error("Error reading file: " + err + ": " + UNICODE_DATA_FILE));
        } else {
          return parse(text, callback);
        }
      });
    } else {
      console.log("Downloading " + UNICODE_DATA_URL + " (could take a while)...");
      req = http.get(url.parse(UNICODE_DATA_URL), function(res) {
        var text;
        if (res.statusCode !== 200) {
          return callback(new Error("HTTP ERROR: " + res.statusCode + " fetching " + UNICODE_DATA_URL));
        } else {
          res.setEncoding('utf8');
          text = "";
          res.on('data', function(data) {
            return text += data;
          });
          return res.on('end', function() {
            return fs.writeFile(UNICODE_DATA_FILE, text, 'utf8', function(err) {
              if (err != null) {
                console.log("Warning: " + err + ": unable to write to: " + UNICODE_DATA_FILE);
              }
              return parse(text, callback);
            });
          });
        }
      });
      return req.on('error', function(err) {
        return callback(new Error("HTTP ERROR: " + res.statusCode + " fetching " + UNICODE_DATA_URL));
      });
    }
  };

}).call(this);
