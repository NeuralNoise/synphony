// Generated by CoffeeScript 1.3.3
(function() {
  var Db, mongo, url, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mongo = require('mongodb');

  _ = require('underscore')._;

  url = require('url');

  Db = (function() {

    function Db(databaseUrl) {
      var database, server;
      if (databaseUrl == null) {
        databaseUrl = "mongodb://localhost:27017/synphony";
      }
      this.databaseUrl = url.parse(databaseUrl);
      database = this.databaseUrl.path.substring(1);
      server = new mongo.Server(this.databaseUrl.hostname, parseInt(this.databaseUrl.port, 10), {});
      this.dbConnector = new mongo.Db(database, server);
    }

    Db.prototype.load = function(done) {
      var _this = this;
      if (this.db != null) {
        if (done != null) {
          done(null);
        }
        return;
      }
      return this.dbConnector.open(function(err, db) {
        var password, username, _ref;
        if (err) {
          console.error(err);
          if (done != null) {
            return done(err);
          }
        }
        if (!(_this.databaseUrl.auth != null)) {
          _this.db = db;
          if (done != null) {
            return done(err);
          }
        } else {
          _ref = _this.databaseUrl.auth.split(':'), username = _ref[0], password = _ref[1];
          return db.authenticate(username, password, function(err, good) {
            if (err) {
              console.error(err);
            }
            if (!good) {
              console.error("Authentication failed");
              if (done != null) {
                return done(new Error("Authentication failed"));
              }
            } else {
              console.log("Auth successful");
              _this.db = db;
              if (done != null) {
                return done(err);
              }
            }
          });
        }
      });
    };

    Db.prototype.ensureCollections = function(projectName, collectionNames, done) {
      var _this = this;
      return this.db.collectionNames(function(err, existingNames) {
        var col, name, nonexistingNames;
        existingNames = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = existingNames.length; _i < _len; _i++) {
            col = existingNames[_i];
            if (col.options != null) {
              _results.push(col.options.create);
            }
          }
          return _results;
        })();
        nonexistingNames = (function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = collectionNames.length; _i < _len; _i++) {
            name = collectionNames[_i];
            if (_ref = this.collectionName(projectName, name), __indexOf.call(existingNames, _ref) < 0) {
              _results.push(name);
            }
          }
          return _results;
        }).call(_this);
        return _this.createCollections(projectName, nonexistingNames, done);
      });
    };

    Db.prototype.createCollections = function(projectName, collectionNames, done) {
      var collectionName,
        _this = this;
      if (collectionNames.length === 0) {
        return done(null);
      }
      collectionName = collectionNames.shift();
      return this.db.createCollection(this.collectionName(projectName, collectionName), {
        safe: true
      }, function(err) {
        if (err != null) {
          return done(err);
        }
        console.log("Created " + (_this.collectionName(projectName, collectionName)));
        return _this.createCollections(projectName, collectionNames, done);
      });
    };

    Db.prototype.all = function(projectName, collectionName, query, done) {
      query = this.patchObjectID(query);
      return this.selectProjectCollection(projectName, collectionName, function(err, collection) {
        if (err != null) {
          return done(err);
        }
        return collection.find(query).toArray(function(err, docs) {
          return done(err, docs);
        });
      });
    };

    Db.prototype.get = function(projectName, collectionName, query, done) {
      query = this.patchObjectID(query);
      return this.selectProjectCollection(projectName, collectionName, function(err, collection) {
        if (err != null) {
          return done(err);
        }
        return collection.findOne(query, function(err, doc) {
          return done(err, doc);
        });
      });
    };

    Db.prototype.put = function(projectName, collectionName, query, doc, done) {
      query = this.patchObjectID(query);
      doc = this.patchObjectID(doc);
      return this.selectProjectCollection(projectName, collectionName, function(err, collection) {
        if (err != null) {
          return done(err);
        }
        if (!(query != null) && (doc._id != null)) {
          query = {
            _id: doc._id
          };
        }
        if (query != null) {
          return collection.findAndModify(query, [], doc, {
            upsert: true,
            "new": true,
            safe: true
          }, function(err, doc) {
            return done(err, doc);
          });
        } else {
          return collection.insert(doc, {
            safe: true
          }, function(err, doc) {
            return done(err, doc);
          });
        }
      });
    };

    Db.prototype["delete"] = function(projectName, collectionName, query, done) {
      query = this.patchObjectID(query);
      return this.selectProjectCollection(projectName, collectionName, function(err, collection) {
        if (err != null) {
          return done(err);
        }
        return collection.remove(query, {
          safe: true
        }, function(err) {
          return done(err);
        });
      });
    };

    Db.prototype.close = function() {
      return this.db.close();
    };

    Db.prototype.collectionName = function(projectName, collectionName) {
      if (projectName != null) {
        return "" + projectName + "__" + collectionName;
      } else {
        return collectionName;
      }
    };

    Db.prototype.selectProjectCollection = function(projectName, collectionName, done) {
      return this.db.collection(this.collectionName(projectName, collectionName), done);
    };

    Db.prototype.patchObjectID = function(obj) {
      if (!(obj != null)) {
        return obj;
      }
      if ((obj._id != null) && !(obj._id instanceof mongo.ObjectID)) {
        obj._id = mongo.ObjectID(obj._id);
      }
      return obj;
    };

    return Db;

  })();

  exports.Db = Db;

}).call(this);
