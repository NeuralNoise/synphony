// Generated by CoffeeScript 1.3.1
(function() {
  var ID_BYTES, JsonDb, crypto, fs, _;

  fs = require('fs');

  _ = (require('underscore'))._;

  crypto = require('crypto');

  ID_BYTES = 8;

  JsonDb = (function() {

    JsonDb.name = 'JsonDb';

    function JsonDb(filename) {
      this.filename = filename;
      this.db = Object.create(null);
    }

    JsonDb.prototype.load = function() {
      var json;
      try {
        json = fs.readFileSync(this.filename, 'utf8');
        return this.db = JSON.parse(json);
      } catch (e) {
        return console.log("DB Error: " + e);
      }
    };

    JsonDb.prototype.flush = function(callback) {
      var json;
      json = JSON.stringify(this.db);
      return fs.writeFile(this.filename, json, 'utf8', callback != null ? callback : function(err) {
        if (err != null) {
          return console.error(err);
        }
      });
    };

    JsonDb.prototype.all = function(collection) {
      var _ref;
      return (_ref = this.db[collection]) != null ? _ref : [];
    };

    JsonDb.prototype.get = function(collection, id) {
      if (this.db[collection] == null) {
        return null;
      }
      return _.find(this.db[collection], function(item) {
        return item.id === id;
      });
    };

    JsonDb.prototype.put = function(collection, data) {
      var _base;
      data = JSON.parse(JSON.stringify(data));
      if (!(data.id != null)) {
        data.id = crypto.randomBytes(ID_BYTES).toString('hex');
      }
      (_base = this.db)[collection] || (_base[collection] = []);
      this["delete"](collection, data.id, true);
      this.db[collection].push(data);
      this.flush();
      return data;
    };

    JsonDb.prototype["delete"] = function(collection, id, noflush) {
      var item;
      if (noflush == null) {
        noflush = false;
      }
      item = this.get(collection, id);
      if (item != null) {
        this.db[collection] = _.reject(this.db[collection], function(item) {
          return item.id === id;
        });
        if (!noflush) {
          this.flush();
        }
      }
      return item;
    };

    return JsonDb;

  })();

  module.exports.JsonDb = JsonDb;

}).call(this);
