// Generated by CoffeeScript 1.3.1
(function() {

  define(['model/word', 'model/grapheme', 'model/phoneme', 'collection/graphemes', 'collection/phonemes', 'collection/gpcs', 'collection/words'], function(Word, Grapheme, Phoneme, Graphemes, Phonemes, GPCs, Words) {
    describe("Words", function() {
      var one, three, two, words, _ref;
      words = null;
      _ref = [null, null, null], one = _ref[0], two = _ref[1], three = _ref[2];
      beforeEach(function() {
        words = new Words();
        one = new Word({
          name: "one"
        });
        two = new Word({
          name: "two"
        });
        three = new Word({
          name: "three"
        });
        return words.reset([one, two, three]);
      });
      it("should be sorted alphabetically", function() {
        return (expect(words.models)).toEqual([one, three, two]);
      });
      return it("should be valid in a collection", function() {
        return (expect(words.models[0].isValid())).toBeTruthy();
      });
    });
    return describe("Words searching", function() {
      var gpcs, graphemes, phonemes, words;
      graphemes = new Graphemes(DB.graphemes, {
        parse: true
      });
      phonemes = new Phonemes(DB.phonemes, {
        parse: true
      });
      gpcs = new GPCs(DB.gpcs, {
        parse: true,
        graphemes: graphemes,
        phonemes: phonemes
      });
      words = new Words(DB.words, {
        parse: true,
        gpcs: gpcs
      });
      it("should be able to find words with target GPCs", function() {
        var aword, focus, gpc;
        gpc = gpcs.getByName("ei_ei");
        aword = words.getByName("edukeitim");
        focus = words.getFocusGPCWords([gpc]);
        (expect(focus.length)).toEqual(5);
        return (expect(_.include(focus, aword))).toBeTruthy();
      });
      it("should be able to filter words only including certain GPCs", function() {
        var avail, aword, gpcE, gpcM;
        gpcE = gpcs.getByName("e_e");
        gpcM = gpcs.getByName("m_m");
        avail = words.getKnownGPCWords([gpcE, gpcM]);
        (expect(avail.length)).toEqual(4);
        aword = words.getByName("meme");
        return (expect(_.include(avail, aword))).toBeTruthy();
      });
      return it("should be able to filter words only including certain GPCs but must have other GPCs", function() {
        var avail, aword, gpcE, gpcM;
        gpcE = gpcs.getByName("e_e");
        gpcM = gpcs.getByName("m_m");
        avail = words.getKnownFocusGPCWords([gpcE, gpcM], [gpcM]);
        (expect(avail.length)).toEqual(3);
        aword = words.getByName("meme");
        return (expect(_.include(avail, aword))).toBeTruthy();
      });
    });
  });

}).call(this);
