// Generated by CoffeeScript 1.3.1

/*
# SynPhony: Synthetic Phonics tool for early grade literacy teaching
# Copyright (C) 2012  Ryan J. Sanche  <ryan@rj45.ca>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var AdminHomePageView, AdminPageView, AdminRouter, AdminSentencesPageView, AdminWordsPageView, DEBRIS, GPC, GPCButtonView, GPCButtonsView, GPCState, GPCStates, GPCs, Grapheme, Graphemes, HYPHEN_APOSTROPHE, KEY_DEBOUNCE_WAIT, NamedCollection, NamedModel, PageView, Phoneme, Phonemes, PlainWordView, SAVE_DEBOUNCE_WAIT, Segmenter, SegmenterRouter, Sentence, Sentences, Sequence, SequenceElement, SequenceElements, Sequences, Store, TemplateView, ToolbarView, WHITESPACE, Word, Wordlist, WordlistPageView, WordlistView, Words, WordsListView, adminRouter, hasUpperCase, store,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  NamedModel = (function(_super) {

    __extends(NamedModel, _super);

    NamedModel.name = 'NamedModel';

    function NamedModel(attributes, options) {
      if (options == null) {
        options = {};
      }
      this.collection = options.collection;
      NamedModel.__super__.constructor.call(this, attributes, options);
    }

    NamedModel.prototype.validate = function(attribs) {
      var modelsWithMyName;
      if (!(attribs.name != null)) {
        return "Must have a name";
      } else if (this.collection != null) {
        modelsWithMyName = this.collection.where({
          name: attribs.name
        });
        if (_.isEmpty(modelsWithMyName)) {
          return null;
        } else if (modelsWithMyName.length > 1 || (_.first(modelsWithMyName)) !== this) {
          return "Model with name " + attribs.name + " already exists";
        }
      } else {
        return null;
      }
    };

    NamedModel.prototype.parseIdLookup = function(collectionName, fieldName, data) {
      var item,
        _this = this;
      if ((this.collection != null) && (this.collection[collectionName] != null)) {
        if (data[fieldName] instanceof Array && typeof (_.first(data[fieldName])) === "number") {
          return data[fieldName] = _.map(data[fieldName], function(id) {
            var item;
            item = _this.collection[collectionName].get(id);
            return item != null ? item : id;
          });
        } else if (typeof data[fieldName] === "number") {
          item = this.collection[collectionName].get(data[fieldName]);
          return data[fieldName] = item != null ? item : data[fieldName];
        }
      }
    };

    return NamedModel;

  })(Backbone.Model);

  NamedCollection = (function(_super) {

    __extends(NamedCollection, _super);

    NamedCollection.name = 'NamedCollection';

    function NamedCollection() {
      return NamedCollection.__super__.constructor.apply(this, arguments);
    }

    NamedCollection.prototype.getByName = function(name) {
      var model, _i, _len, _ref, _ref1;
      if (!(this._byName != null)) {
        this._byName = {};
        _ref = this.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (((_ref1 = model.attributes) != null ? _ref1.name : void 0) != null) {
            this._byName[model.attributes.name] = model;
          }
        }
      }
      return this._byName[name] || null;
    };

    NamedCollection.prototype.add = function(models, options) {
      this._byName = null;
      return NamedCollection.__super__.add.call(this, models, options);
    };

    NamedCollection.prototype.remove = function(models, options) {
      this._byName = null;
      return NamedCollection.__super__.remove.call(this, models, options);
    };

    return NamedCollection;

  })(Backbone.Collection);

  Store = (function() {

    Store.name = 'Store';

    Store.prototype.phonemes = null;

    Store.prototype.graphemes = null;

    Store.prototype.gpcs = null;

    Store.prototype.words = null;

    Store.prototype.sentences = null;

    Store.prototype.sequences = null;

    function Store() {
      this.phonemes = new Phonemes;
      this.graphemes = new Graphemes;
      this.gpcs = new GPCs([], {
        graphemes: this.graphemes,
        phonemes: this.phonemes
      });
      this.words = new Words([], {
        gpcs: this.gpcs
      });
      this.sentences = new Sentences([], {
        words: this.words
      });
      this.sequences = new Sequences([], {
        gpcs: this.gpcs,
        words: this.words,
        sentences: this.sentences
      });
    }

    Store.prototype.loadAll = function(callback) {
      var stack;
      stack = [this.phonemes, this.graphemes, this.gpcs, this.words, this.sentences, this.sequences];
      return this.loadStack(stack, callback);
    };

    Store.prototype.fetch = function(collection, callback) {
      var error, success;
      success = function(collection, response) {
        return callback();
      };
      error = function(collection, response) {
        return callback("TODO: meaningful error here");
      };
      return collection.fetch({
        success: success,
        error: error
      });
    };

    Store.prototype.loadStack = function(stack, callback) {
      var collection,
        _this = this;
      collection = stack.shift();
      return this.fetch(collection, function(error) {
        if (error != null) {
          return callback(error);
        } else if (stack.length === 0) {
          return callback();
        } else {
          return _this.loadStack(stack, callback);
        }
      });
    };

    return Store;

  })();

  GPC = (function(_super) {

    __extends(GPC, _super);

    GPC.name = 'GPC';

    function GPC(attributes, options) {
      GPC.__super__.constructor.call(this, attributes, options);
    }

    GPC.prototype.graphemeName = function() {
      var grapheme;
      grapheme = this.get('grapheme');
      if (grapheme != null) {
        return grapheme.get('name');
      } else {
        return null;
      }
    };

    GPC.prototype.parse = function(data) {
      this.parseIdLookup('graphemes', 'grapheme', data);
      this.parseIdLookup('phonemes', 'phoneme', data);
      return data;
    };

    return GPC;

  })(NamedModel);

  GPCs = (function(_super) {

    __extends(GPCs, _super);

    GPCs.name = 'GPCs';

    GPCs.prototype.model = GPC;

    GPCs.prototype.url = '/api/v1/gpcs/';

    function GPCs(models, options) {
      if (options == null) {
        options = {};
      }
      this.graphemes = options.graphemes;
      this.phonemes = options.phonemes;
      GPCs.__super__.constructor.call(this, models, options);
    }

    return GPCs;

  })(NamedCollection);

  GPCState = (function(_super) {

    __extends(GPCState, _super);

    GPCState.name = 'GPCState';

    function GPCState() {
      return GPCState.__super__.constructor.apply(this, arguments);
    }

    GPCState.prototype.defaults = {
      active: false,
      focus: false,
      gpc: null
    };

    GPCState.prototype.toggle = function() {
      if (!(this.get('active')) && !(this.get('focus'))) {
        return this.set({
          active: true
        });
      } else if ((this.get('active')) && !(this.get('focus'))) {
        return this.set({
          focus: true
        });
      } else {
        return this.set({
          active: false,
          focus: false
        });
      }
    };

    return GPCState;

  })(Backbone.Model);

  GPCStates = (function(_super) {

    __extends(GPCStates, _super);

    GPCStates.name = 'GPCStates';

    GPCStates.prototype.model = GPCState;

    function GPCStates(gpcs, options) {
      var models;
      if (gpcs instanceof GPCs) {
        gpcs = gpcs.models;
      }
      models = _.map(gpcs, function(gpc) {
        return new GPCState({
          gpc: gpc
        });
      });
      GPCStates.__super__.constructor.call(this, models, options);
    }

    return GPCStates;

  })(Backbone.Collection);

  Grapheme = (function(_super) {

    __extends(Grapheme, _super);

    Grapheme.name = 'Grapheme';

    function Grapheme() {
      return Grapheme.__super__.constructor.apply(this, arguments);
    }

    return Grapheme;

  })(NamedModel);

  Graphemes = (function(_super) {

    __extends(Graphemes, _super);

    Graphemes.name = 'Graphemes';

    function Graphemes() {
      return Graphemes.__super__.constructor.apply(this, arguments);
    }

    Graphemes.prototype.model = Grapheme;

    Graphemes.prototype.url = '/api/v1/graphemes/';

    return Graphemes;

  })(NamedCollection);

  Phoneme = (function(_super) {

    __extends(Phoneme, _super);

    Phoneme.name = 'Phoneme';

    function Phoneme() {
      return Phoneme.__super__.constructor.apply(this, arguments);
    }

    return Phoneme;

  })(NamedModel);

  Phonemes = (function(_super) {

    __extends(Phonemes, _super);

    Phonemes.name = 'Phonemes';

    function Phonemes() {
      return Phonemes.__super__.constructor.apply(this, arguments);
    }

    Phonemes.prototype.model = Phoneme;

    Phonemes.prototype.url = '/api/v1/phonemes/';

    return Phonemes;

  })(NamedCollection);

  Segmenter = (function() {

    Segmenter.name = 'Segmenter';

    function Segmenter(words, gpcs) {
      this.words = words;
      this.gpcs = gpcs;
    }

    Segmenter.prototype.segment = function() {
      var gpcs,
        _this = this;
      gpcs = this.gpcs.sortBy(function(gpc) {
        return gpc.graphemeName().length;
      });
      gpcs = gpcs.reverse();
      return this.words.each(function(word) {
        var foundGpc, gpc, remaining, wordGpcs, _i, _len;
        remaining = (word.get('name')).toLowerCase();
        wordGpcs = [];
        while (remaining !== '') {
          foundGpc = null;
          for (_i = 0, _len = gpcs.length; _i < _len; _i++) {
            gpc = gpcs[_i];
            if ((remaining.indexOf(gpc.graphemeName())) === 0) {
              foundGpc = gpc;
              break;
            }
          }
          if (!foundGpc) {
            wordGpcs = null;
            break;
          }
          remaining = remaining.substring(gpc.graphemeName().length);
          wordGpcs.push(foundGpc);
        }
        if (!(word.set({
          gpcs: wordGpcs
        }))) {
          throw new Error("Invalid word!");
        }
      });
    };

    return Segmenter;

  })();

  Sentence = (function(_super) {

    __extends(Sentence, _super);

    Sentence.name = 'Sentence';

    function Sentence() {
      return Sentence.__super__.constructor.apply(this, arguments);
    }

    Sentence.prototype.parse = function(data) {
      this.parseIdLookup('words', 'words', data);
      return data;
    };

    return Sentence;

  })(NamedModel);

  Sentences = (function(_super) {

    __extends(Sentences, _super);

    Sentences.name = 'Sentences';

    Sentences.prototype.model = Sentence;

    Sentences.prototype.url = '/api/v1/sentences/';

    function Sentences(models, options) {
      if (options == null) {
        options = {};
      }
      this.words = options.words;
      Sentences.__super__.constructor.call(this, models, options);
    }

    return Sentences;

  })(NamedCollection);

  Sequence = (function(_super) {

    __extends(Sequence, _super);

    Sequence.name = 'Sequence';

    function Sequence() {
      return Sequence.__super__.constructor.apply(this, arguments);
    }

    Sequence.prototype.parse = function(data) {
      if (data.elements != null) {
        data.elements = new SequenceElements(data.elements, {
          parse: true,
          collection: this
        });
      }
      return data;
    };

    return Sequence;

  })(NamedModel);

  Sequences = (function(_super) {

    __extends(Sequences, _super);

    Sequences.name = 'Sequences';

    Sequences.prototype.model = Sequence;

    Sequences.prototype.url = '/api/v1/sequences/';

    function Sequences(models, options) {
      if (options == null) {
        options = {};
      }
      this.sentences = options.sentences;
      this.words = options.words;
      this.gpcs = options.gpcs;
      Sequences.__super__.constructor.call(this, models, options);
    }

    return Sequences;

  })(NamedCollection);

  SequenceElement = (function(_super) {

    __extends(SequenceElement, _super);

    SequenceElement.name = 'SequenceElement';

    function SequenceElement() {
      return SequenceElement.__super__.constructor.apply(this, arguments);
    }

    SequenceElement.prototype.parse = function(data) {
      this.parseIdLookup('gpcs', 'gpc', data);
      this.parseIdLookup('words', 'new_words', data);
      this.parseIdLookup('sentences', 'new_sentences', data);
      return data;
    };

    return SequenceElement;

  })(NamedModel);

  SequenceElements = (function(_super) {

    __extends(SequenceElements, _super);

    SequenceElements.name = 'SequenceElements';

    SequenceElements.prototype.model = SequenceElement;

    function SequenceElements(models, options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      if (options == null) {
        options = {};
      }
      this.sentences = (_ref = options.collection) != null ? (_ref1 = _ref.collection) != null ? _ref1.sentences : void 0 : void 0;
      this.words = (_ref2 = options.collection) != null ? (_ref3 = _ref2.collection) != null ? _ref3.words : void 0 : void 0;
      this.gpcs = (_ref4 = options.collection) != null ? (_ref5 = _ref4.collection) != null ? _ref5.gpcs : void 0 : void 0;
      SequenceElements.__super__.constructor.call(this, models, options);
    }

    return SequenceElements;

  })(NamedCollection);

  hasUpperCase = function(str) {
    return str.toLowerCase() !== str;
  };

  WHITESPACE = /[\u0009\u000A\u000B\u000C\u000D\u0020\u0085\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u2028\u2029\u202F\u205F\u3000]+/;

  DEBRIS = new XRegExp("[\\p{P}\\p{Sm}\\p{Sc}\\p{So}\\p{N}]", "g");

  HYPHEN_APOSTROPHE = "'`-\u2018\u2019\u2010";

  Wordlist = (function(_super) {

    __extends(Wordlist, _super);

    Wordlist.name = 'Wordlist';

    function Wordlist() {
      return Wordlist.__super__.constructor.apply(this, arguments);
    }

    Wordlist.prototype.url = '/api/v1/wordlist/1';

    Wordlist.prototype.defaults = {
      id: 1
    };

    Wordlist.prototype.initialize = function() {};

    Wordlist.prototype.toList = function() {
      var words;
      words = (this.get('wordlist')).split(WHITESPACE);
      words = _.unique(words);
      return _.reject(words, function(word) {
        return word === '';
      });
    };

    Wordlist.prototype.clean = function() {
      return this.fromArray(this.toList().sort());
    };

    Wordlist.prototype.fromArray = function(ary) {
      return this.set({
        wordlist: ary.join('\n')
      });
    };

    Wordlist.prototype.cleanUpperCase = function() {
      var list;
      list = this.toList();
      list = _.reject(list, function(word) {
        return hasUpperCase(word) && _.include(list, word.toLowerCase());
      });
      return this.fromArray(list);
    };

    Wordlist.prototype.cleanDebris = function() {
      var wordlist;
      wordlist = XRegExp.replace(this.get('wordlist'), DEBRIS, function(match) {
        if (HYPHEN_APOSTROPHE.indexOf(match[0]) >= 0) {
          return match[0];
        } else {
          return '';
        }
      });
      this.set({
        wordlist: wordlist
      });
      return this.clean();
    };

    Wordlist.prototype.resetWords = function(words) {
      var list;
      list = _.map(this.toList(), function(word) {
        return {
          name: word
        };
      });
      return words.reset(list);
    };

    return Wordlist;

  })(Backbone.Model);

  Word = (function(_super) {

    __extends(Word, _super);

    Word.name = 'Word';

    function Word() {
      return Word.__super__.constructor.apply(this, arguments);
    }

    Word.prototype.parse = function(data) {
      this.parseIdLookup('gpcs', 'gpcs', data);
      return data;
    };

    return Word;

  })(NamedModel);

  Words = (function(_super) {

    __extends(Words, _super);

    Words.name = 'Words';

    Words.prototype.url = '/api/v1/words/';

    Words.prototype.model = Word;

    Words.prototype.comparator = function(word) {
      return word.get('name');
    };

    function Words(models, options) {
      if (options == null) {
        options = {};
      }
      this.gpcs = options.gpcs;
      Words.__super__.constructor.call(this, models, options);
    }

    return Words;

  })(NamedCollection);

  AdminRouter = (function(_super) {

    __extends(AdminRouter, _super);

    AdminRouter.name = 'AdminRouter';

    AdminRouter.prototype.routes = {
      "": "home",
      "words": "words",
      "sentences": "sentences"
    };

    function AdminRouter(options) {
      this.store = options.store;
      AdminRouter.__super__.constructor.call(this, options);
    }

    AdminRouter.prototype.home = function() {
      return this.showPage(new AdminHomePageView({
        store: this.store
      }));
    };

    AdminRouter.prototype.words = function() {
      return this.showPage(new AdminWordsPageView({
        store: this.store
      }));
    };

    AdminRouter.prototype.sentences = function() {
      return this.showPage(new AdminSentencesPageView({
        store: this.store
      }));
    };

    AdminRouter.prototype.showPage = function(pageView) {
      return pageView.render();
    };

    return AdminRouter;

  })(Backbone.Router);

  SegmenterRouter = (function(_super) {

    __extends(SegmenterRouter, _super);

    SegmenterRouter.name = 'SegmenterRouter';

    function SegmenterRouter() {
      return SegmenterRouter.__super__.constructor.apply(this, arguments);
    }

    SegmenterRouter.prototype.routes = {
      "": "wordlist"
    };

    SegmenterRouter.prototype.wordlist = function() {
      var wordlist, wordlistPageView;
      wordlist = new Wordlist;
      wordlist.fetch();
      wordlistPageView = new WordlistPageView({
        model: wordlist
      });
      ($('#main')).empty();
      return ($('#main')).append(wordlistPageView.render().el);
    };

    return SegmenterRouter;

  })(Backbone.Router);

  /*
  # SynPhony: Synthetic Phonics tool for early grade literacy teaching
  # Copyright (C) 2012  Ryan J. Sanche  <ryan@rj45.ca>
  
  # This program is free software: you can redistribute it and/or modify
  # it under the terms of the GNU General Public License as published by
  # the Free Software Foundation, either version 3 of the License, or
  # (at your option) any later version.
  
  # This program is distributed in the hope that it will be useful,
  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  # GNU General Public License for more details.
  
  # You should have received a copy of the GNU General Public License
  # along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */


  adminRouter = null;

  store = null;

  jQuery(function() {
    ($('#side-panel-toggle')).click(function() {
      ($('#control-panel')).toggle('fast', 'swing');
      ($('#side-panel')).toggle('fast', 'swing');
      return ($('#side-panel-toggle')).toggleClass('active');
    });
    store = new Store;
    return store.loadAll(function(error) {
      if (error != null) {
        return alert(error);
      } else {
        adminRouter = new AdminRouter({
          store: store
        });
        return Backbone.history.start();
      }
    });
  });

  Handlebars.registerHelper('link_to', function(context) {
    return "<a href='" + context.url + "'>" + context.body + "</a>";
  });

  Handlebars.registerHelper('each_pair', function(context, options) {
    return (_.map(context, function(value, key) {
      return options.fn({
        key: key,
        value: value
      });
    })).join("");
  });

  TemplateView = (function(_super) {

    __extends(TemplateView, _super);

    TemplateView.name = 'TemplateView';

    function TemplateView() {
      return TemplateView.__super__.constructor.apply(this, arguments);
    }

    TemplateView.prototype.templateData = function() {
      var _ref, _ref1;
      return (_ref = (_ref1 = this.model) != null ? _ref1.attributes : void 0) != null ? _ref : {};
    };

    TemplateView.prototype.toHTML = function() {
      return Handlebars.templates[this.template](this.templateData());
    };

    TemplateView.prototype.render = function() {
      console.log("Render template");
      this.$el.html(this.toHTML());
      return this;
    };

    return TemplateView;

  })(Backbone.View);

  ToolbarView = (function(_super) {

    __extends(ToolbarView, _super);

    ToolbarView.name = 'ToolbarView';

    function ToolbarView() {
      return ToolbarView.__super__.constructor.apply(this, arguments);
    }

    ToolbarView.prototype.template = "common/toolbar";

    ToolbarView.prototype.events = {
      "click .accordion": "accordion"
    };

    ToolbarView.prototype.accordion = function(event) {
      event.preventDefault();
      $(event.target).parent().toggleClass('active');
      return $(event.target).parent().next().toggle('fast');
    };

    ToolbarView.prototype.templateData = function() {
      return _.map(this.model.toolbar, function(value, key) {
        return {
          name: key,
          id: value.id
        };
      });
    };

    ToolbarView.prototype.render = function() {
      var _this = this;
      ToolbarView.__super__.render.apply(this, arguments);
      console.log("Rendering toolbar view ");
      _.each(this.model.toolbar, function(view) {
        return (_this.$('#' + view.id)).replaceWith(view.render().el);
      });
      return this;
    };

    return ToolbarView;

  })(TemplateView);

  PageView = (function(_super) {

    __extends(PageView, _super);

    PageView.name = 'PageView';

    PageView.prototype.menuTemplate = "common/menu";

    function PageView(options) {
      PageView.__super__.constructor.call(this, options);
      this.toolbarView = new ToolbarView({
        model: {
          toolbar: this.toolbar()
        }
      });
    }

    PageView.prototype.menu = function() {
      return {
        'Name 1': '#one',
        'Name 2': '#two'
      };
    };

    PageView.prototype.toolbar = function() {
      return {
        'Example': new Backbone.View({
          id: "id"
        })
      };
    };

    PageView.prototype.menuHTML = function() {
      return Handlebars.templates[this.menuTemplate]({
        menu: this.menu()
      });
    };

    PageView.prototype.render = function() {
      ($('#main-content')).empty();
      ($('#main-content')).append(PageView.__super__.render.call(this).el);
      ($('#main-menu')).html(this.menuHTML());
      ($('#toolbar-content')).empty();
      ($('#toolbar-content')).append(this.toolbarView.render().el);
      return this;
    };

    return PageView;

  })(TemplateView);

  AdminPageView = (function(_super) {

    __extends(AdminPageView, _super);

    AdminPageView.name = 'AdminPageView';

    AdminPageView.prototype.toolbar = function() {
      return {
        'Spelling Patterns': new GPCButtonsView({
          collection: this.store.gpcs,
          id: "spelling-patterns"
        })
      };
    };

    AdminPageView.prototype.menu = function() {
      return {
        'Home': '#',
        'Words': '#words',
        'Sentences': '#sentences'
      };
    };

    function AdminPageView(options) {
      this.store = options.store;
      AdminPageView.__super__.constructor.call(this, options);
    }

    return AdminPageView;

  })(PageView);

  AdminHomePageView = (function(_super) {

    __extends(AdminHomePageView, _super);

    AdminHomePageView.name = 'AdminHomePageView';

    function AdminHomePageView() {
      return AdminHomePageView.__super__.constructor.apply(this, arguments);
    }

    AdminHomePageView.prototype.template = 'admin/home_page';

    return AdminHomePageView;

  })(AdminPageView);

  AdminSentencesPageView = (function(_super) {

    __extends(AdminSentencesPageView, _super);

    AdminSentencesPageView.name = 'AdminSentencesPageView';

    function AdminSentencesPageView() {
      return AdminSentencesPageView.__super__.constructor.apply(this, arguments);
    }

    AdminSentencesPageView.prototype.template = 'admin/sentences_page';

    return AdminSentencesPageView;

  })(AdminPageView);

  AdminWordsPageView = (function(_super) {

    __extends(AdminWordsPageView, _super);

    AdminWordsPageView.name = 'AdminWordsPageView';

    AdminWordsPageView.prototype.template = 'admin/words_page';

    function AdminWordsPageView(options) {
      AdminWordsPageView.__super__.constructor.call(this, options);
      this.collection = this.store.words;
      this.wordsView = new WordsListView({
        collection: this.collection
      });
    }

    AdminWordsPageView.prototype.render = function() {
      AdminWordsPageView.__super__.render.call(this);
      ($('#words-list')).empty();
      ($('#words-list')).append(this.wordsView.render().el);
      return this;
    };

    return AdminWordsPageView;

  })(AdminPageView);

  GPCButtonView = (function(_super) {

    __extends(GPCButtonView, _super);

    GPCButtonView.name = 'GPCButtonView';

    GPCButtonView.prototype.template = 'gpcs/button';

    GPCButtonView.prototype.tagName = 'span';

    GPCButtonView.prototype.events = {
      'click button': 'onClick'
    };

    function GPCButtonView(options) {
      GPCButtonView.__super__.constructor.call(this, options);
      this.model.on('change', this.render, this);
    }

    GPCButtonView.prototype.templateData = function() {
      var grapheme;
      console.log("get data");
      grapheme = (this.model.get('gpc')).get('grapheme');
      return {
        active: this.model.get('active'),
        focus: this.model.get('focus'),
        name: grapheme.get('name')
      };
    };

    GPCButtonView.prototype.onClick = function(event) {
      event.preventDefault();
      return this.model.toggle();
    };

    return GPCButtonView;

  })(TemplateView);

  GPCButtonsView = (function(_super) {

    __extends(GPCButtonsView, _super);

    GPCButtonsView.name = 'GPCButtonsView';

    function GPCButtonsView(options) {
      this.gpcs = options.collection;
      this.resetViews();
      this.gpcs.on('reset', this.onGPCsReset, this);
      GPCButtonsView.__super__.constructor.call(this, options);
    }

    GPCButtonsView.prototype.resetViews = function() {
      this.collection = new GPCStates(this.gpcs);
      return this.views = this.collection.map(function(state) {
        return new GPCButtonView({
          model: state
        });
      });
    };

    GPCButtonsView.prototype.onGPCsReset = function() {
      this.resetViews();
      return this.render();
    };

    GPCButtonsView.prototype.render = function() {
      var _this = this;
      this.$el.empty();
      _.each(this.views, function(view) {
        return _this.$el.append(view.render().el);
      });
      console.log("GPC button view rendered");
      return this;
    };

    return GPCButtonsView;

  })(Backbone.View);

  KEY_DEBOUNCE_WAIT = 400;

  SAVE_DEBOUNCE_WAIT = 1000;

  WordlistView = (function(_super) {

    __extends(WordlistView, _super);

    WordlistView.name = 'WordlistView';

    function WordlistView() {
      return WordlistView.__super__.constructor.apply(this, arguments);
    }

    WordlistView.prototype.template = 'segmenter/wordlist';

    WordlistView.prototype.events = {
      "keyup #wordlist": "onKeyUp",
      "click #wordlist-clean": "onClickClean",
      "click #wordlist-clean-uppercase": "onClickCleanUpperCase",
      "click #wordlist-clean-debris": "onClickCleanDebris"
    };

    WordlistView.prototype.initialize = function() {
      this.onKeyUp = _.debounce(this.onKeyUp, KEY_DEBOUNCE_WAIT);
      this.save = _.debounce(this.save, SAVE_DEBOUNCE_WAIT);
      this.model.on('change', this.onModelChange, this);
      return this.model.on('sync', this.onModelSaved, this);
    };

    WordlistView.prototype.onKeyUp = function() {
      var newValue, oldValue;
      newValue = (this.$('#wordlist')).val();
      oldValue = this.model.get('wordlist');
      this.model.set({
        wordlist: newValue
      });
      if (newValue !== oldValue) {
        return this.save();
      }
    };

    WordlistView.prototype.onModelChange = function() {
      var newValue, oldValue;
      oldValue = (this.$('#wordlist')).val();
      newValue = this.model.get('wordlist');
      (this.$('#wordlist')).val(newValue);
      if (oldValue !== newValue && oldValue !== '') {
        return this.save();
      }
    };

    WordlistView.prototype.onClickClean = function() {
      return this.model.clean();
    };

    WordlistView.prototype.onClickCleanUpperCase = function() {
      return this.model.cleanUpperCase();
    };

    WordlistView.prototype.onClickCleanDebris = function() {
      return this.model.cleanDebris();
    };

    WordlistView.prototype.save = function() {
      return this.model.save();
    };

    WordlistView.prototype.onModelSaved = function() {
      ($('#wordlist-saved')).fadeIn(50).delay(1000).fadeOut(500);
      return console.log("Wordlist saved");
    };

    return WordlistView;

  })(TemplateView);

  WordlistPageView = (function(_super) {

    __extends(WordlistPageView, _super);

    WordlistPageView.name = 'WordlistPageView';

    function WordlistPageView() {
      return WordlistPageView.__super__.constructor.apply(this, arguments);
    }

    WordlistPageView.prototype.initialize = function() {
      return this.wordlistView = new WordlistView({
        model: this.model
      });
    };

    WordlistPageView.prototype.render = function() {
      ($(this.el)).append(this.wordlistView.render().el);
      return this;
    };

    return WordlistPageView;

  })(Backbone.View);

  WordsListView = (function(_super) {

    __extends(WordsListView, _super);

    WordsListView.name = 'WordsListView';

    WordsListView.prototype.template = 'words/words_list';

    WordsListView.prototype.wordView = function(word) {
      return new PlainWordView({
        model: word
      });
    };

    function WordsListView(options) {
      WordsListView.__super__.constructor.call(this, options);
      this.collection.on('reset', this.onCollectionReset, this);
    }

    WordsListView.prototype.onCollectionReset = function() {
      this._views = null;
      console.log("Words reset");
      return this.render();
    };

    WordsListView.prototype.views = function() {
      var _this = this;
      log(this.collection.length);
      if (!this._views) {
        this._views = this.collection.map(function(word) {
          return _this.wordView(word);
        });
      }
      return this._views;
    };

    WordsListView.prototype.render = function() {
      var $ul;
      WordsListView.__super__.render.call(this);
      $ul = this.$('ul');
      $ul.empty();
      _.each(this.views(), function(view) {
        return $ul.append(view.render().el);
      });
      return this;
    };

    return WordsListView;

  })(TemplateView);

  PlainWordView = (function(_super) {

    __extends(PlainWordView, _super);

    PlainWordView.name = 'PlainWordView';

    function PlainWordView() {
      return PlainWordView.__super__.constructor.apply(this, arguments);
    }

    PlainWordView.prototype.template = 'words/plain_word';

    PlainWordView.prototype.tagName = 'span';

    PlainWordView.prototype.tagClass = 'word';

    return PlainWordView;

  })(TemplateView);

}).call(this);
