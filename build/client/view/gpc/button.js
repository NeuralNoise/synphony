// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['view/common/template', 'text!templates/gpc/button.handlebars'], function(TemplateView, hbs_template) {
    var GPCButtonView;
    return GPCButtonView = (function(_super) {

      __extends(GPCButtonView, _super);

      GPCButtonView.name = 'GPCButtonView';

      GPCButtonView.prototype.template = hbs_template;

      GPCButtonView.prototype.tagName = 'span';

      GPCButtonView.prototype.events = {
        'click button': 'onClick'
      };

      function GPCButtonView(options) {
        GPCButtonView.__super__.constructor.call(this, options);
        this.model.on('change', this.render, this);
      }

      GPCButtonView.prototype.templateData = function() {
        var grapheme;
        grapheme = (this.model.get('gpc')).get('grapheme');
        return {
          active: this.model.isKnown(),
          focus: this.model.hasFocus(),
          name: grapheme.name()
        };
      };

      GPCButtonView.prototype.onClick = function(event) {
        event.preventDefault();
        return this.model.toggle();
      };

      return GPCButtonView;

    })(TemplateView);
  });

}).call(this);
