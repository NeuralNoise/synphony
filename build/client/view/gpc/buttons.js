// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone', 'collection/user_gpcs', 'view/gpc/button'], function(_, Backbone, UserGPCs, GPCButtonView) {
    var GPCButtonsView;
    return GPCButtonsView = (function(_super) {

      __extends(GPCButtonsView, _super);

      GPCButtonsView.name = 'GPCButtonsView';

      function GPCButtonsView(options) {
        GPCButtonsView.__super__.constructor.call(this, options);
        this.resetViews();
        this.collection.on('reset', this.onGPCsReset, this);
      }

      GPCButtonsView.prototype.resetViews = function() {
        console.log("reset gpc buttons view views:", this.collection.length);
        return this.views = this.collection.map(function(ugpc) {
          return new GPCButtonView({
            model: ugpc
          });
        });
      };

      GPCButtonsView.prototype.onGPCsReset = function() {
        this.resetViews();
        return this.render();
      };

      GPCButtonsView.prototype.render = function() {
        var _this = this;
        this.$el.empty();
        _.each(this.views, function(view) {
          console.log(view.model.name());
          return _this.$el.append(view.render().el);
        });
        console.log("GPC button view rendered");
        return this;
      };

      return GPCButtonsView;

    })(Backbone.View);
  });

}).call(this);
