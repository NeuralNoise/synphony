// Generated by CoffeeScript 1.3.1
(function() {
  var PlainWordView, WordsListView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  WordsListView = (function(_super) {

    __extends(WordsListView, _super);

    WordsListView.name = 'WordsListView';

    WordsListView.prototype.template = 'words/words_list';

    WordsListView.prototype.wordView = function(word) {
      return new PlainWordView({
        model: word
      });
    };

    function WordsListView(options) {
      WordsListView.__super__.constructor.call(this, options);
      this.collection.on('reset', this.onCollectionReset, this);
    }

    WordsListView.prototype.onCollectionReset = function() {
      this._views = null;
      console.log("Words reset");
      return this.render();
    };

    WordsListView.prototype.views = function() {
      var _this = this;
      log(this.collection.length);
      if (!this._views) {
        this._views = this.collection.map(function(word) {
          return _this.wordView(word);
        });
      }
      return this._views;
    };

    WordsListView.prototype.render = function() {
      var $ul;
      WordsListView.__super__.render.call(this);
      $ul = this.$('ul');
      $ul.empty();
      _.each(this.views(), function(view) {
        return $ul.append(view.render().el);
      });
      return this;
    };

    return WordsListView;

  })(TemplateView);

  PlainWordView = (function(_super) {

    __extends(PlainWordView, _super);

    PlainWordView.name = 'PlainWordView';

    function PlainWordView() {
      return PlainWordView.__super__.constructor.apply(this, arguments);
    }

    PlainWordView.prototype.template = 'words/plain_word';

    PlainWordView.prototype.tagName = 'span';

    PlainWordView.prototype.tagClass = 'word';

    return PlainWordView;

  })(TemplateView);

}).call(this);
