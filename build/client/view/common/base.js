// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['underscore', 'backbone'], function(_, Backbone) {
    var BaseView;
    return BaseView = (function(_super) {

      __extends(BaseView, _super);

      BaseView.name = 'BaseView';

      function BaseView() {
        return BaseView.__super__.constructor.apply(this, arguments);
      }

      BaseView.prototype.destroy = function() {
        this.undelegateEvents();
        this.remove();
        this.trigger('destroy');
        this.off();
        return console.log("Destroyed");
      };

      BaseView.prototype.delegateEvents = function(events) {
        var combinedEvents;
        if (events == null) {
          events = this.events;
        }
        if (_.isFunction(events)) {
          events = events();
        }
        combinedEvents = {};
        _.extend(combinedEvents, events, this.prepareTriggers());
        return BaseView.__super__.delegateEvents.call(this, combinedEvents);
      };

      BaseView.prototype.prepareTriggers = function() {
        var events, triggers,
          _this = this;
        if (!this.triggers) {
          return {};
        }
        triggers = this.triggers;
        if (_.isFunction(triggers)) {
          triggers = triggers();
        }
        events = {};
        _.each(triggers, function(value, key) {
          return events[key] = function(e) {
            if (e != null) {
              if (typeof e.preventDefault === "function") {
                e.preventDefault();
              }
            }
            if (e != null) {
              if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
              }
            }
            return _this.trigger(value);
          };
        });
        return events;
      };

      return BaseView;

    })(Backbone.View);
  });

}).call(this);
