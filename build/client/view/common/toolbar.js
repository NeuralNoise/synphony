// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['underscore', 'jquery', 'view/common/template', 'text!templates/common/toolbar.handlebars'], function(_, $, TemplateView, hbs_template) {
    var ToolbarView;
    return ToolbarView = (function(_super) {

      __extends(ToolbarView, _super);

      ToolbarView.name = 'ToolbarView';

      function ToolbarView() {
        return ToolbarView.__super__.constructor.apply(this, arguments);
      }

      ToolbarView.prototype.template = hbs_template;

      ToolbarView.prototype.el = '#toolbar-content';

      ToolbarView.prototype.events = {
        "click .accordion": "accordion"
      };

      ToolbarView.prototype.accordion = function(event) {
        var parent;
        event.preventDefault();
        parent = ($(event.target)).parent();
        parent.toggleClass('active');
        return parent.next().toggle('fast');
      };

      ToolbarView.prototype.templateData = function() {
        return _.map(this.model.toolbar, function(value, key) {
          return {
            name: key,
            id: value.id
          };
        });
      };

      ToolbarView.prototype.render = function() {
        var _this = this;
        ToolbarView.__super__.render.apply(this, arguments);
        console.log("Rendering toolbar view ");
        _.each(this.model.toolbar, function(view) {
          return (_this.$('#' + view.id)).replaceWith(view.render().el);
        });
        return this;
      };

      return ToolbarView;

    })(TemplateView);
  });

}).call(this);
