// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['underscore', 'view/common/base'], function(_, BaseView) {
    var CompositeView;
    return CompositeView = (function(_super) {

      __extends(CompositeView, _super);

      CompositeView.name = 'CompositeView';

      function CompositeView(options) {
        if (options == null) {
          options = {};
        }
        CompositeView.__super__.constructor.call(this, options);
        this.views = [];
        this.rendered = false;
      }

      CompositeView.prototype.destroy = function() {
        _.each(this.views, function(view) {
          return view.destroy();
        });
        this.views = [];
        return CompositeView.__super__.destroy.call(this);
      };

      CompositeView.prototype.addView = function(view, index) {
        if (index == null) {
          index = -1;
        }
        if (index < 0 || index >= this.views.length) {
          this.views.push(view);
          if (this.rendered) {
            return this.$el.append(view.el);
          }
        } else {
          this.views.splice(index, 0, view);
          if (this.rendered) {
            return this.$el.children()[index].insertBefore(view.el);
          }
        }
      };

      CompositeView.prototype.removeView = function(view) {
        var index;
        index = this.views.indexOf(view);
        if (index >= 0) {
          this.views.splice(index, 1);
          return view.destroy();
        } else {
          throw new Error("View not found");
        }
      };

      CompositeView.prototype.render = function() {
        var _this = this;
        if (this.rendered) {
          _.each(this.views, function(view) {
            return view.remove();
          });
        }
        this.rendered = true;
        _.each(this.views, function(view) {
          return _this.$el.append(view.render().el);
        });
        console.log("rendered composite/collection");
        return this;
      };

      return CompositeView;

    })(BaseView);
  });

}).call(this);
