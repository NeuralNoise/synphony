// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['underscore', 'collection/named', 'model/word'], function(_, NamedCollection, Word) {
    var Words;
    return Words = (function(_super) {

      __extends(Words, _super);

      Words.name = 'Words';

      Words.prototype.url = '/api/v1/words/';

      Words.prototype.model = Word;

      Words.prototype.comparator = function(word) {
        return word.get('name');
      };

      function Words(models, options) {
        if (options == null) {
          options = {};
        }
        this.gpcs = options.gpcs;
        Words.__super__.constructor.call(this, models, options);
      }

      Words.prototype.getFocusGPCWords = function(focusGPCs, list) {
        if (list == null) {
          list = this.models;
        }
        return _.filter(list, function(word) {
          var wordGPCs;
          wordGPCs = word.get('gpcs');
          return _.any(wordGPCs, function(wordGPC) {
            return _.any(focusGPCs, function(focusGPC) {
              return focusGPC.id === wordGPC.id;
            });
          });
        });
      };

      Words.prototype.getKnownGPCWords = function(knownGPCs, list) {
        if (list == null) {
          list = this.models;
        }
        return _.filter(list, function(word) {
          var wordGPCs;
          wordGPCs = word.get('gpcs');
          return _.all(wordGPCs, function(wordGPC) {
            return _.any(knownGPCs, function(knownGPC) {
              return knownGPC.id === wordGPC.id;
            });
          });
        });
      };

      Words.prototype.getKnownFocusGPCWords = function(knownGPCs, focusGPCs, list) {
        var words;
        if (list == null) {
          list = this.models;
        }
        words = this.getFocusGPCWords(focusGPCs, list);
        return this.getKnownGPCWords(knownGPCs, words);
      };

      return Words;

    })(NamedCollection);
  });

}).call(this);
