// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone'], function(Backbone) {
    var BaseCollection;
    return BaseCollection = (function(_super) {

      __extends(BaseCollection, _super);

      function BaseCollection() {
        return BaseCollection.__super__.constructor.apply(this, arguments);
      }

      BaseCollection.prototype.project = "synphony";

      BaseCollection.prototype.url = function() {
        return "/api/v1/" + this.project + "/" + this.collectionUrl + "/";
      };

      BaseCollection.prototype.add = function(models, options) {
        if (options == null) {
          options = {};
        }
        BaseCollection.__super__.add.call(this, models, options);
        if (!options.silent) {
          return this.trigger('update', this);
        }
      };

      BaseCollection.prototype.remove = function(models, options) {
        if (options == null) {
          options = {};
        }
        BaseCollection.__super__.remove.call(this, models, options);
        if (!options.silent) {
          return this.trigger('update', this);
        }
      };

      BaseCollection.prototype.reset = function(models, options) {
        if (options == null) {
          options = {};
        }
        BaseCollection.__super__.reset.call(this, models, options);
        if (!options.silent) {
          return this.trigger('update', this);
        }
      };

      return BaseCollection;

    })(Backbone.Collection);
  });

}).call(this);
