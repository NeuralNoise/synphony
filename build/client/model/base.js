// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['backbone', 'underscore'], function(Backbone, _) {
    var BaseModel;
    return BaseModel = (function(_super) {

      __extends(BaseModel, _super);

      BaseModel.name = 'BaseModel';

      function BaseModel(attributes, options) {
        if (options == null) {
          options = {};
        }
        this.collection = options.collection;
        BaseModel.__super__.constructor.call(this, attributes, options);
      }

      BaseModel.prototype.parseIdLookup = function(collectionName, fieldName, data) {
        var item,
          _this = this;
        if ((this.collection != null) && (this.collection[collectionName] != null)) {
          if ((_.isArray(data[fieldName])) && (_.isNumber(_.first(data[fieldName])))) {
            return data[fieldName] = _.map(data[fieldName], function(id) {
              var item;
              item = _this.collection[collectionName].get(id);
              return item != null ? item : id;
            });
          } else if (_.isNumber(data[fieldName])) {
            item = this.collection[collectionName].get(data[fieldName]);
            return data[fieldName] = item != null ? item : data[fieldName];
          }
        }
      };

      return BaseModel;

    })(Backbone.Model);
  });

}).call(this);
