// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['model/base'], function(BaseModel) {
    var UserGPC;
    return UserGPC = (function(_super) {

      __extends(UserGPC, _super);

      UserGPC.name = 'UserGPC';

      UserGPC.prototype.defaults = {
        known: false,
        focus: false,
        gpc: null
      };

      function UserGPC(attributes, options) {
        if (attributes == null) {
          attributes = {};
        }
        if (options == null) {
          options = {};
        }
        UserGPC.__super__.constructor.call(this, attributes, options);
      }

      UserGPC.prototype.name = function() {
        return this.gpc().name();
      };

      UserGPC.prototype.isKnown = function() {
        return this.get('known');
      };

      UserGPC.prototype.hasFocus = function() {
        return this.get('focus');
      };

      UserGPC.prototype.gpc = function() {
        return this.get('gpc');
      };

      UserGPC.prototype.graphemeName = function() {
        return this.gpc().graphemeName();
      };

      UserGPC.prototype.toggle = function() {
        if (!this.isKnown() && !this.hasFocus()) {
          return this.set({
            known: true
          });
        } else if (this.isKnown() && !this.hasFocus()) {
          return this.set({
            focus: true
          });
        } else {
          return this.set({
            known: false,
            focus: false
          });
        }
      };

      return UserGPC;

    })(BaseModel);
  });

}).call(this);
