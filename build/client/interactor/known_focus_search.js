// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['underscore', 'interactor/base'], function(_, BaseInteractor) {
    var KnownFocusSearch;
    return KnownFocusSearch = (function(_super) {

      __extends(KnownFocusSearch, _super);

      function KnownFocusSearch(collection) {
        this.models = collection != null ? collection.models : void 0;
      }

      KnownFocusSearch.prototype.getKnownFocusItems = function(knownGPCs, focusGPCs, list) {
        var models;
        if (list == null) {
          list = this.models;
        }
        models = this.getFocusItems(focusGPCs, list);
        return this.getKnownItems(knownGPCs, models);
      };

      KnownFocusSearch.prototype.run = function(knownGPCs, focusGPCs, list, callback) {
        if (list == null) {
          list = this.models;
        }
        return callback(null, this.getKnownFocusItems(knownGPCs, focusGPCs, list));
      };

      KnownFocusSearch.prototype.getFocusItems = function(focusGPCs, list) {
        if (list == null) {
          list = this.models;
        }
        return _.filter(list, function(model) {
          var modelGPCs;
          modelGPCs = model.gpcs();
          return _.any(modelGPCs, function(modelGPC) {
            return _.any(focusGPCs, function(focusGPC) {
              return focusGPC.id === modelGPC.id;
            });
          });
        });
      };

      KnownFocusSearch.prototype.getKnownItems = function(knownGPCs, list) {
        if (list == null) {
          list = this.models;
        }
        return _.filter(list, function(model) {
          var modelGPCs;
          modelGPCs = model.gpcs();
          return _.all(modelGPCs, function(modelGPC) {
            return _.any(knownGPCs, function(knownGPC) {
              return knownGPC.id === modelGPC.id;
            });
          });
        });
      };

      return KnownFocusSearch;

    })(BaseInteractor);
  });

}).call(this);
